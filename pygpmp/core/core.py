# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _core
else:
    import _core

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_SwigPyIterator

    def value(self):
        return _core.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _core.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _core.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _core.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _core.SwigPyIterator_equal(self, x)

    def copy(self):
        return _core.SwigPyIterator_copy(self)

    def next(self):
        return _core.SwigPyIterator_next(self)

    def __next__(self):
        return _core.SwigPyIterator___next__(self)

    def previous(self):
        return _core.SwigPyIterator_previous(self)

    def advance(self, n):
        return _core.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _core.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _core.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _core.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _core.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _core.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _core.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _core:
_core.SwigPyIterator_swigregister(SwigPyIterator)
MAX_ROWS = _core.MAX_ROWS
SHOW_ROWS = _core.SHOW_ROWS
DataType_Unknown = _core.DataType_Unknown
DataType_String = _core.DataType_String
DataType_Integer = _core.DataType_Integer
DataType_Double = _core.DataType_Double
class DataTable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _core.DataTable_swiginit(self, _core.new_DataTable())

    def csv_read(self, *args):
        return _core.DataTable_csv_read(self, *args)

    def csv_write(self):
        return _core.DataTable_csv_write(self)

    def tsv_read(self, *args):
        return _core.DataTable_tsv_read(self, *args)

    def json_read(self, *args):
        return _core.DataTable_json_read(self, *args)

    def datetime(self, column_name, extract_year=True, extract_month=True, extract_time=False):
        return _core.DataTable_datetime(self, column_name, extract_year, extract_month, extract_time)

    def sort(self, sort_columns, ascending=True):
        return _core.DataTable_sort(self, sort_columns, ascending)

    def group_by(self, group_by_columns):
        return _core.DataTable_group_by(self, group_by_columns)

    def first(self, groups):
        return _core.DataTable_first(self, groups)

    def describe(self):
        return _core.DataTable_describe(self)

    def str_to_int(self, src):
        return _core.DataTable_str_to_int(self, src)

    def str_to_double(self, src):
        return _core.DataTable_str_to_double(self, src)

    def display(self, display_all=False):
        return _core.DataTable_display(self, display_all)
    __swig_destroy__ = _core.delete_DataTable

# Register DataTable in _core:
_core.DataTable_swigregister(DataTable)
DEBUG = _core.DEBUG
INFO = _core.INFO
WARNING = _core.WARNING
ERROR = _core.ERROR
CONSOLE = _core.CONSOLE
FILE_ONLY = _core.FILE_ONLY
CONSOLE_AND_FILE = _core.CONSOLE_AND_FILE
class TypeCast(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def convert(self):
        return _core.TypeCast_convert(self)

    def __init__(self):
        _core.TypeCast_swiginit(self, _core.new_TypeCast())
    __swig_destroy__ = _core.delete_TypeCast

# Register TypeCast in _core:
_core.TypeCast_swigregister(TypeCast)
class Logger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, level=INFO, useTimestamp=True):
        _core.Logger_swiginit(self, _core.new_Logger(level, useTimestamp))
    __swig_destroy__ = _core.delete_Logger

    def setLogLevel(self, level):
        return _core.Logger_setLogLevel(self, level)

    def enableTimestamps(self, enable):
        return _core.Logger_enableTimestamps(self, enable)

    def setLogDestination(self, destination):
        return _core.Logger_setLogDestination(self, destination)

    def setLogFile(self, logFile):
        return _core.Logger_setLogFile(self, logFile)

    def log(self, level, message):
        return _core.Logger_log(self, level, message)

# Register Logger in _core:
_core.Logger_swigregister(Logger)

