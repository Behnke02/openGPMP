name: Wheels


on:
  push:
    branches: [ main , py_root_dir ]
  pull_request:
    branches: [ main ]
  create:
    types: [ tag ]
    branches: [ main , py_root_dir ]

jobs:
  latest_version:
    runs-on: ubuntu-latest
    steps:
    - uses: oprypin/find-latest-tag@v1
      with:
        repository: akielaries/openMTPK
      id: mtpk_version

    - run: echo ${{ steps.mtpk_version.outputs.tag }}

  bump_version:
    needs: [ latest_version ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: '0'

    - name: Bump version and push tag
      if: github.ref == 'refs/heads/py_root_dir'
      uses: anothrNick/github-tag-action@1.58.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: true
        VERBOSE: true
        DEFAULT_BRANCH: py_root_dir
        RELEASE_BRANCHES: py_root_dir
        MAJOR_STRING_TOKEN: MAJOR
        MINOR_STRING_TOKEN: MINOR
        PATCH_STRING_TOKEN: PATCH
        DEFAULT_BUMP: none
        BRANCH_HISTORY: last
      id: new_version
    
    - run: echo ${{ steps.new_version.outputs.new_tag }}

  test_build:
    name: test_wheel_yml
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'

      - name: tree
        run: |
          ls -lash
          tree .github/
          tree ../
          tree
          tree -d
      - name: Run sdist on linux
        uses: ./.github/workflows/test_wheel.yml
        with:
          job: test_build

  sdist_raspy:
    name: py_rpi_yml
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run sdist on RPI
        uses: ./.github/workflows/py_rpi.yml
        with:
          job: sdist_raspy

  build_plat:
    name: Build source distribution
    needs: [ test_build , sdist_raspy , bump_version , latest_version ]
    if: success() && needs.bump_version.outputs.new_tag != ${{ needs.latest_version.mtpk_version.outputs.tag }} 
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # required for versioneer to find tags

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Build sdist
        run: |
          pip install versioneer
          pip install autopep8
          cd Python
          #python setup.py build_ext --inplace
          pipx run build --sdist
          autopep8 --recursive --in-place --aggressive --aggressive .

      - uses: actions/upload-artifact@v3
        with:
          path: Python/dist/*.tar.gz

  compile_wheels:
    name: Build Wheels on ${{ matrix.os }}
    needs: [ build_plat ]
    runs-on: ${{ matrix.os }} 
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # required for versioneer to find tags

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Install Versioneer
        run: |
          pip install versioneer

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.11.4
        env:
          CIBW_ENVIRONMENT: "CC='g++' CXX='g++' CFLAGS='-std=c++2a' CXXFLAGS='-std=c++2a'"
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_ARCHS_LINUX: auto aarch64 ppc64le s390x

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  publish:
    name: Publish to PYPI
    needs: [ compile_wheels, build_plat ]
    runs-on: ubuntu-latest
    steps: 
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  # the build installation is supported by x86 based OSX 
  # versions and LINUX distros by the CIBUILDWHEEL utilities.
  # test pip install openmtpk on the following platforms
  RasPy:
    name: RPI pip install
    runs-on: ubuntu-latest
    needs: publish
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run pip_raspy
        uses: ./.github/workflows/py_rpi.yml
        with:
          job:
            pip_raspy

  ARMV6py:
    needs: publish
    uses: ./.github/workflows/ARMV6py.yml

  ARMV7py:
    needs: publish
    uses: ./.github/workflows/ARMV7py.yml

  ARMV8py:
    needs: publish
    uses: ./.github/workflows/ARMV8py.yml

  RISCVpy:
    needs: publish
    uses: ./.github/workflows/RISCVpy.yml

  S390Xpy:
    needs: publish
    uses: ./.github/workflows/S390Xpy.yml

  PPC64LEpy:
    needs: publish
    uses: ./.github/workflows/PPC64LEpy.yml

  PyNix:
    needs: publish
    uses: ./.github/workflows/py_nix.yml
  
  PyOSX:
    needs: publish
    uses: ./.github/workflows/py_osx.yml

