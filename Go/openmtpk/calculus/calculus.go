/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.1.1+fortran
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

// source: calculus/calculus.i

package calculus

/*
#define intgo swig_intgo
typedef void *swig_voidp;

#include <stddef.h>
#include <stdint.h>


typedef ptrdiff_t intgo;
typedef size_t uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;


typedef long long swig_type_1;
typedef _gostring_ swig_type_2;
typedef long long swig_type_3;
typedef long long swig_type_4;
typedef long long swig_type_5;
typedef _gostring_ swig_type_6;
extern void _wrap_Swig_free_calculus_67d55e50377b8e34(uintptr_t arg1);
extern uintptr_t _wrap_Swig_malloc_calculus_67d55e50377b8e34(swig_intgo arg1);
extern swig_type_1 _wrap_Calculus_derivative_term_calculus_67d55e50377b8e34(uintptr_t arg1, swig_type_2 arg2, swig_type_3 arg3);
extern swig_type_4 _wrap_Calculus_deriv_at_calculus_67d55e50377b8e34(uintptr_t arg1, swig_voidp arg2, swig_type_5 arg3);
extern swig_type_6 _wrap_Calculus_deriv_calculus_67d55e50377b8e34(uintptr_t arg1, swig_voidp arg2);
extern uintptr_t _wrap_new_Calculus_calculus_67d55e50377b8e34(void);
extern void _wrap_delete_Calculus_calculus_67d55e50377b8e34(uintptr_t arg1);
#undef intgo
*/
import "C"

import "unsafe"
import _ "runtime/cgo"
import "sync"


type _ unsafe.Pointer



var Swig_escape_always_false bool
var Swig_escape_val interface{}


type _swig_fnptr *byte
type _swig_memberptr *byte


func getSwigcptr(v interface { Swigcptr() uintptr }) uintptr {
	if v == nil {
		return 0
	}
	return v.Swigcptr()
}


type _ sync.Mutex


type swig_gostring struct { p uintptr; n int }
func swigCopyString(s string) string {
  p := *(*swig_gostring)(unsafe.Pointer(&s))
  r := string((*[0x7fffffff]byte)(unsafe.Pointer(p.p))[:p.n])
  Swig_free(p.p)
  return r
}

func Swig_free(arg1 uintptr) {
	_swig_i_0 := arg1
	C._wrap_Swig_free_calculus_67d55e50377b8e34(C.uintptr_t(_swig_i_0))
}

func Swig_malloc(arg1 int) (_swig_ret uintptr) {
	var swig_r uintptr
	_swig_i_0 := arg1
	swig_r = (uintptr)(C._wrap_Swig_malloc_calculus_67d55e50377b8e34(C.swig_intgo(_swig_i_0)))
	return swig_r
}

type SwigcptrCalculus uintptr

func (p SwigcptrCalculus) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrCalculus) SwigIsCalculus() {
}

func (arg1 SwigcptrCalculus) Derivative_term(arg2 string, arg3 int64) (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int64)(C._wrap_Calculus_derivative_term_calculus_67d55e50377b8e34(C.uintptr_t(_swig_i_0), *(*C.swig_type_2)(unsafe.Pointer(&_swig_i_1)), C.swig_type_3(_swig_i_2)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func (arg1 SwigcptrCalculus) Deriv_at(arg2 *string, arg3 int64) (_swig_ret int64) {
	var swig_r int64
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	swig_r = (int64)(C._wrap_Calculus_deriv_at_calculus_67d55e50377b8e34(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1), C.swig_type_5(_swig_i_2)))
	return swig_r
}

func (arg1 SwigcptrCalculus) Deriv(arg2 *string) (_swig_ret string) {
	var swig_r string
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	swig_r_p := C._wrap_Calculus_deriv_calculus_67d55e50377b8e34(C.uintptr_t(_swig_i_0), C.swig_voidp(_swig_i_1))
	swig_r = *(*string)(unsafe.Pointer(&swig_r_p))
	var swig_r_1 string
 swig_r_1 = swigCopyString(swig_r) 
	return swig_r_1
}

func NewCalculus() (_swig_ret Calculus) {
	var swig_r Calculus
	swig_r = (Calculus)(SwigcptrCalculus(C._wrap_new_Calculus_calculus_67d55e50377b8e34()))
	return swig_r
}

func DeleteCalculus(arg1 Calculus) {
	_swig_i_0 := getSwigcptr(arg1)
	C._wrap_delete_Calculus_calculus_67d55e50377b8e34(C.uintptr_t(_swig_i_0))
}

type Calculus interface {
	Swigcptr() uintptr
	SwigIsCalculus()
	Derivative_term(arg2 string, arg3 int64) (_swig_ret int64)
	Deriv_at(arg2 *string, arg3 int64) (_swig_ret int64)
	Deriv(arg2 *string) (_swig_ret string)
}


